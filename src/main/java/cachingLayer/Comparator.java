package cachingLayer;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

import org.bson.Document;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;

/**
 * Pulls queried data from mongoDB and compares key values
 * 
 * @author ActianceEngInterns
 * @version 1.0
 * @since 2017/07/10
 */
public class Comparator {
	private DbFeeder feeder = new DbFeeder();
	private MongoCollection<Document> col;
	private String root;

	public Comparator(String root) {
		feeder.feedDocs(root);
		this.root = root.substring(3);
		System.out.println("Root folder: " + this.root);
		this.col = feeder.getCol();
	}

	/**
	 * Takes in two path inputs, makes sure the inputs are valid, generates
	 * filter documents to find the files to compare within those parameters
	 * 
	 * @param path1
	 * @param path2
	 */
	public void query(String path1, String path2) {
		if (path1.equals(path2)) {
			System.err.println("Paths cannot be the same");
			return;
		}

		String[] arr1 = path1.split("/");
		String[] arr2 = path2.split("/");
		if (!arr1[0].equals(arr2[0])) {
			System.err.println("Paths must be in the same root file");
			return;
		} else if (!arr1[0].equals(root.split("/")[0])) {
			System.err.println("Paths must be in the specified root file");
			return;
		} else if (arr1.length != arr2.length) {
			System.err.println("Paths must be at the same specified level");
			return;
		} else if (arr1.length > 5 || arr1.length < 2) {
			System.err.println("Paths must be at environment, fabric, node, or file level");
			return;
		}
		Document filter1 = new Document();
		Document filter2 = new Document();
		String[] filterKeys = { "environment", "fabric", "node", "filename" };
		for (int i = 1; i < arr1.length; i++) {
			if (!arr1[i].equals("*")) {
				filter1.append(filterKeys[i - 1], arr1[i]);
			}
		}
		for (int i = 1; i < arr2.length; i++) {
			if (!arr2[i].equals("*")) {
				filter2.append(filterKeys[i - 1], arr2[i]);
			}
		}
		System.out.println("Filters:");
		System.out.println(filter1);
		System.out.println(filter2);
		findFiles(filter1, filter2);
	}

	/**
	 * Pulls files from MongoDB matching the filter docs generated by query()
	 * 
	 * @param filter1
	 * @param filter2
	 */
	private void findFiles(Document filter1, Document filter2) {
		FindIterable<Document> iter1 = col.find(filter1);
		FindIterable<Document> iter2 = col.find(filter2);
		MongoCursor<Document> cursor1 = iter1.iterator();
		MongoCursor<Document> cursor2 = iter2.iterator();
		System.out.println("v: " + (cursor1.hasNext() && cursor2.hasNext()));
		Document compare1 = new Document();
		Document compare2 = new Document();
		try {
			while (cursor1.hasNext() && cursor2.hasNext()) {
				compare1.putAll(cursor1.next());
				compare2.putAll(cursor2.next());
			}
			compareAll(compare1, compare2);
			compareDiffs(compare1, compare2);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Helper method to iterate through key set and print out list of keys and
	 * values from respective Documents.
	 * 
	 * @param set
	 *            Set of keys to be printed out
	 * @param doc1
	 *            Document with values to be printed out
	 * @param doc2
	 *            Document with values to be printed out
	 */
	private void printIter(Set<String> set, Document doc1, Document doc2) {
		Iterator<String> iter = set.iterator();
		while (iter.hasNext()) {
			String key = iter.next();
			String val1 = doc1.get(key).toString();
			String val2 = doc2.get(key).toString();
			// MongoDB does not allow dots in key names the database, so they
			// are converted to the string "```" in order to be stored, and
			// are converted back to dots to be displayed
			key = key.replace("```", ".");
			if (val1 != null && val2 != null && !val1.equals(val2)) {
				// tabs may cause output to not print
				System.out.println(key + "\t" + val1 + "\t" + key + "\t" + val2 + "\t\t\tdiff");
			} else if (val1 == null) {
				System.out.println("\t\t" + key + "\t" + val2 + "\tmissing in doc1\t");
			} else if (val2 == null) {
				System.out.println(key + "\t" + val1 + "\t\t" + "\tmissing in doc2\t");
			} else {
				System.out.println(key + "\t" + val1 + "\t" + key + "\t" + val2);
			}
		}
	}

	/**
	 * Compares all keys between two Documents in database as per UI
	 * specifications.
	 * 
	 * @param doc1
	 *            Document to be compared
	 * @param doc2
	 *            Document to be compared
	 */
	private void compareAll(Document doc1, Document doc2) {
		// generates key set
		Set<String> setAmalgam = new TreeSet<>(doc1.keySet());
		setAmalgam.addAll(new TreeSet<String>(doc2.keySet()));
		setAmalgam.remove("_id"); // auto-generated by MongoDB
		/*
		 * // manual check for key set System.out.println("doc1 key set: " +
		 * doc1.keySet()); System.out.println("doc2 key set: " + doc2.keySet());
		 * System.out.println("complete key set " + setAmalgam);
		 */
		// list all keys and values from both Documents
		System.out.println();
		System.out.println("------------------------list------------------------");
		System.out.println();
		printIter(setAmalgam, doc1, doc2);
	}

	/**
	 * Compares keys with different values (including null) between two
	 * Documents in database as per UI specifications.
	 * 
	 * @param doc1
	 *            Document to be compared
	 * @param doc2
	 *            Document to be compared
	 */
	private void compareDiffs(Document doc1, Document doc2) {
		// remove path identifiers
		doc1.remove("environment");
		doc1.remove("fabric");
		doc1.remove("node");
		doc1.remove("filename");
		doc2.remove("environment");
		doc2.remove("fabric");
		doc2.remove("node");
		doc2.remove("filename");

		// generates key sets
		Set<String> doc1unique = new HashSet<>(doc1.keySet());
		Set<String> doc2unique = new HashSet<>(doc2.keySet());
		Set<String> overlapSet = new HashSet<>(doc1.keySet());
		doc1unique.removeAll(new HashSet<String>(doc2.keySet()));
		doc2unique.removeAll(new HashSet<String>(doc1.keySet()));
		overlapSet.retainAll(new HashSet<String>(doc2.keySet()));
		overlapSet.remove("_id"); // auto-generated by MongoDB
		/*
		 * // manual check for key sets System.out.println("doc1 key set " +
		 * doc1.keySet()); System.out.println("doc2 key set " + doc2.keySet());
		 * System.out.println("unique in doc1: " + doc1unique);
		 * System.out.println("unique in doc2: " + doc2unique);
		 * System.out.println("overlap in d12: " + overlapSet);
		 */
		// gets differences between all files
		System.out.println();
		System.out.println("------------------------diff------------------------");
		System.out.println();
		Iterator<String> iter = overlapSet.iterator();
		TreeSet<String> diffSet = new TreeSet<>();
		while (iter.hasNext()) {
			String key = iter.next();
			if (!doc1.get(key).equals(doc2.get(key))) {
				diffSet.add(key);
			}
		}
		printIter(new TreeSet<String>(diffSet), doc1, doc2);
	}

}
